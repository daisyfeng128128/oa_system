package com.baofeng.oa.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.baofeng.commons.entity.RoleUsers;
import com.baofeng.oa.bean.ElectEquipentBean;
import com.baofeng.oa.bean.OfficeSuppliesBean;
import com.baofeng.oa.dao.PurchaseAuditDAO;
import com.baofeng.oa.dao.PurchaseDAO;
import com.baofeng.oa.entity.BaseEnums.Auditp;
import com.baofeng.oa.entity.BaseEnums.Purchase;
import com.baofeng.oa.entity.ElectEquipent;
import com.baofeng.oa.entity.Employee;
import com.baofeng.oa.entity.OfficeSupplies;
import com.baofeng.oa.service.IDepartmentService;
import com.baofeng.oa.service.IEmployeeService;
import com.baofeng.oa.service.IPurchaseAuditService;
import com.baofeng.utils.CustomDateUtils;
import com.baofeng.utils.NPageResult;
import com.baofeng.utils.SearchFilter;

@Service("purchaseAuditService")
public class PurchaseAuditServiceImpl implements IPurchaseAuditService {
	
	@Autowired
	private PurchaseAuditDAO purchaseAuditDAO;
	@Autowired
	private IDepartmentService departmentService;
	@Autowired
	private IEmployeeService employeeService;
	@Autowired
	private PurchaseDAO purchaseDAO;

	@Override
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public NPageResult readPages(int pageSize, int curPage, String sortName,String sortOrder, Integer type,Integer id,SearchFilter searchFilter) {
		NPageResult rows = this.purchaseAuditDAO.readPages(pageSize, curPage, sortName, sortOrder, id, searchFilter,type);
		if (rows != null && rows.getData().size() > 0) {
			List<ElectEquipentBean> beanList = new ArrayList<ElectEquipentBean>();
			for (Object o : rows.getData()) {
				ElectEquipent electEquipent = (ElectEquipent) o;
				ElectEquipentBean bean = new ElectEquipentBean();
				bean.setId(electEquipent.getId());
				bean.setPurType(electEquipent.getPurType());
				bean.setBranchs(electEquipent.getBranchs().toString());
				bean.setNum(String.valueOf(electEquipent.getEmployee().getNumber()));
				bean.setRealname(electEquipent.getRealname());
				bean.setDepart(electEquipent.getDepart());
				bean.setAudit(electEquipent.getAuditp() == Auditp.PENDING ? "待审核" : (electEquipent.getAuditp() == Auditp.UNKNOWN)? "审核中" : (electEquipent.getAuditp() == Auditp.PASSED ? "通过" : "未通过"));
				bean.setPurchase(electEquipent.getPurchase() == Purchase.UNKNOWN ? "采购中" : (electEquipent.getPurchase() == Purchase.PASSED ? "采购完成" : electEquipent.getPurchase() == Purchase.PENDING ? "待采购" : ""));
				bean.setApplyDT(electEquipent.getApplyDT());
				if (electEquipent.getCompleteDT() != null) {
					bean.setCompleteDT(electEquipent.getCompleteDT());
				}
				if (electEquipent.getRejectMsg() != null) {
					bean.setRejectMsg(electEquipent.getRejectMsg());
				}
				bean.setGoodsname(electEquipent.getGoodsname());
				bean.setModel(electEquipent.getModel());
				bean.setNumbers(electEquipent.getNumbers().toString());
				bean.setPlace(electEquipent.getPlace());
				bean.setTaxMoney(electEquipent.getTaxMoney().toString());
				bean.setPriceMoney(electEquipent.getPriceMoney().toString());
				bean.setTotalMoney(electEquipent.getTotalMoney().toString());
				beanList.add(bean);
			}
			rows.setData(beanList);
		}
		return rows;
	}

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public NPageResult<?> readPagesR(int pageSize, int curPage,String sortName, String sortOrder, Integer type,Integer id,SearchFilter searchFilter) {
		NPageResult rows = this.purchaseAuditDAO.readPagesOff(pageSize, curPage, sortName, sortOrder, searchFilter,type,id);
		if (rows != null && rows.getData().size() > 0) {
			List<OfficeSuppliesBean> beanList = new ArrayList<OfficeSuppliesBean>();
			for (Object o : rows.getData()) {
				OfficeSupplies officeSupplies = (OfficeSupplies) o;
				OfficeSuppliesBean bean = new OfficeSuppliesBean();
				bean.setId(officeSupplies.getId());
				bean.setBranchs(officeSupplies.getBranchs().toString());
				bean.setPurType(officeSupplies.getPurType());
				bean.setNum(String.valueOf(officeSupplies.getEmployee().getNumber()));
				bean.setRealname(officeSupplies.getRealname());
				bean.setDepart(officeSupplies.getDepart());
				bean.setAudit(officeSupplies.getAuditp() == Auditp.PENDING ? "待审核" : (officeSupplies.getAuditp() == Auditp.UNKNOWN)? "审核中" : (officeSupplies.getAuditp() == Auditp.PASSED ? "通过" : "未通过"));
				bean.setApplyDT(officeSupplies.getApplyDT());
				bean.setGoodsname(officeSupplies.getGoodsname());
				bean.setModel(officeSupplies.getModel());
				if (officeSupplies.getRejectMsg() != null) {
					bean.setRejectMsg(officeSupplies.getRejectMsg());
				}
				bean.setPurchase(officeSupplies.getPurchase() == Purchase.UNKNOWN ? "采购中" : (officeSupplies.getPurchase() == Purchase.PASSED ? "采购完成" : officeSupplies.getPurchase() == Purchase.PENDING ? "待采购" : ""));
				bean.setApplyDT(officeSupplies.getApplyDT());
				if (officeSupplies.getCompleteDT() != null) {
					bean.setCompleteDT(officeSupplies.getCompleteDT());
				}
				bean.setNumbers(officeSupplies.getNumbers().toString());
				bean.setTaxMoney(officeSupplies.getTaxMoney().toString());
				bean.setPriceMoney(officeSupplies.getPriceMoney().toString());
				bean.setTotalMoney(officeSupplies.getTotalMoney().toString());
				beanList.add(bean);
			}
			rows.setData(beanList);
		}
		return rows;
	}

	@Override
	public boolean updatedeptPass(ElectEquipentBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			ElectEquipent electEquipent = this.purchaseDAO.readElectEquipent(bean.getId());
			Employee employee = this.employeeService.readEmployee(users.getUser().getId());
			if (electEquipent != null) {
				electEquipent.setAuditp(Auditp.UNKNOWN);
				electEquipent.setPassType(1);
				electEquipent.setReason(employee.getName() + "通过部门审核"+ "</br>");
				if (this.purchaseDAO.saveElectEquipent(electEquipent)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updateequiPass(ElectEquipentBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			ElectEquipent electEquipent = this.purchaseDAO.readElectEquipent(bean.getId());
			Employee employee = this.employeeService.readEmployee(users.getUser().getId());
			if (electEquipent != null) {
				electEquipent.setAuditp(Auditp.UNKNOWN);
				electEquipent.setPassType(2);
				electEquipent.setReason(employee.getName() + "通过设备人员审核"+ "</br>");
				if (this.purchaseDAO.saveElectEquipent(electEquipent)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updatepersonPass(ElectEquipentBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			ElectEquipent electEquipent = this.purchaseDAO.readElectEquipent(bean.getId());
			Employee employee = this.employeeService.readEmployee(users.getUser().getId());
			if (electEquipent != null) {
				electEquipent.setAuditp(Auditp.UNKNOWN);
				electEquipent.setPassType(3);
				electEquipent.setReason(employee.getName() + "通过负责人审核"+ "</br>");
				if (this.purchaseDAO.saveElectEquipent(electEquipent)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updateheadPass(ElectEquipentBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			ElectEquipent electEquipent = this.purchaseDAO.readElectEquipent(bean.getId());
			if (electEquipent != null) {
				electEquipent.setAuditp(Auditp.PASSED);
				electEquipent.setPassType(4);
				electEquipent.setPurchase(Purchase.PENDING);
				if (this.purchaseDAO.saveElectEquipent(electEquipent)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updatestartEl(ElectEquipentBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			ElectEquipent electEquipent = this.purchaseDAO.readElectEquipent(bean.getId());
			if (electEquipent != null) {
				electEquipent.setPurchase(Purchase.UNKNOWN);
				if (this.purchaseDAO.saveElectEquipent(electEquipent)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updatendEl(ElectEquipentBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			ElectEquipent electEquipent = this.purchaseDAO.readElectEquipent(bean.getId());
			if (electEquipent != null) {
				Date curDate = new Date(System.currentTimeMillis());
				electEquipent.setCompleteDT(CustomDateUtils.format(String.valueOf(curDate), CustomDateUtils.format1));
				electEquipent.setPurchase(Purchase.PASSED);
				if (this.purchaseDAO.saveElectEquipent(electEquipent)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updatedeptPassOff(OfficeSuppliesBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			OfficeSupplies officeSupplies = this.purchaseDAO.readOfficeSupplies(bean.getId());
			Employee employee = this.employeeService.readEmployee(users.getUser().getId());
			if (officeSupplies != null) {
				officeSupplies.setAuditp(Auditp.UNKNOWN);
				officeSupplies.setPassType(1);
				officeSupplies.setReason(employee.getName() +"通过部门审核"+ "</br>");
				if (this.purchaseDAO.saveOfficeSupplies(officeSupplies)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updatepersonPassOff(OfficeSuppliesBean bean,RoleUsers users, HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			OfficeSupplies officeSupplies = this.purchaseDAO.readOfficeSupplies(bean.getId());
			Employee employee = this.employeeService.readEmployee(users.getUser().getId());
			if (officeSupplies != null) {
				officeSupplies.setAuditp(Auditp.UNKNOWN);
				officeSupplies.setPassType(2);
				officeSupplies.setReason(employee.getName() +"通过负责人审核"+ "</br>");
				if (this.purchaseDAO.saveOfficeSupplies(officeSupplies)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updateheadPassOff(OfficeSuppliesBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			OfficeSupplies officeSupplies = this.purchaseDAO.readOfficeSupplies(bean.getId());
			if (officeSupplies != null) {
				officeSupplies.setAuditp(Auditp.PASSED);
				officeSupplies.setPassType(3);
				officeSupplies.setPurchase(Purchase.PENDING);
				if (this.purchaseDAO.saveOfficeSupplies(officeSupplies)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updatestartOff(OfficeSuppliesBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			OfficeSupplies officeSupplies = this.purchaseDAO.readOfficeSupplies(bean.getId());
			if (officeSupplies != null) {
				officeSupplies.setPurchase(Purchase.UNKNOWN);
				if (this.purchaseDAO.saveOfficeSupplies(officeSupplies)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updatendOff(OfficeSuppliesBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			OfficeSupplies officeSupplies = this.purchaseDAO.readOfficeSupplies(bean.getId());
			if (officeSupplies != null) {
				Date curDate = new Date(System.currentTimeMillis());
				officeSupplies.setCompleteDT(CustomDateUtils.format(String.valueOf(curDate), CustomDateUtils.format1));
				officeSupplies.setPurchase(Purchase.PASSED);
				if (this.purchaseDAO.saveOfficeSupplies(officeSupplies)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updateRejEl(ElectEquipentBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			ElectEquipent electEquipent = this.purchaseDAO.readElectEquipent(bean.getId());
			if (electEquipent != null) {
				electEquipent.setAuditp(Auditp.NOTPASS);
				electEquipent.setRejectMsg(bean.getRejectMsg());
				if (this.purchaseDAO.saveElectEquipent(electEquipent)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean updateRejOff(OfficeSuppliesBean bean, RoleUsers users,HttpServletRequest request) {
		if (bean.getId() != null && bean.getId().intValue() > 0) {
			OfficeSupplies officeSupplies = this.purchaseDAO.readOfficeSupplies(bean.getId());
			if (officeSupplies != null) {
				officeSupplies.setAuditp(Auditp.NOTPASS);
				officeSupplies.setRejectMsg(bean.getRejectMsg());
				if (this.purchaseDAO.saveOfficeSupplies(officeSupplies)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public List<ElectEquipent> readElectEquipentbyBranch(Integer branchs) {
		return this.purchaseAuditDAO.findElectEquipentbyBranch(branchs);
	}

	@Override
	public List<OfficeSupplies> readOfficeSuppliesbyBranch(Integer branchs) {
		return this.purchaseAuditDAO.findOfficeSuppliesbyBranch(branchs);
	}

	@Override
	public ElectEquipent checkReasonEl(ElectEquipentBean bean, RoleUsers users,HttpServletRequest request) {
		return this.purchaseDAO.readElectEquipent(bean.getId());
	}

	@Override
	public ElectEquipent checkReason(Integer id) {
		return this.purchaseDAO.readElectEquipent(id);
	}

	@Override
	public OfficeSupplies checkReasonOff(Integer id) {
		return this.purchaseDAO.readOfficeSupplies(id);
	}

}